<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiX.Security</name>
    </assembly>
    <members>
        <member name="T:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions">
            <summary>
            Configuration options for AEAD encryption (AES-GCM).
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.RawKey">
            <summary>
            Raw AES key (16/24/32 bytes). Prefer 32 bytes (AES-256).
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.RawKeyHex">
            <summary>
            Hex representation of RawKey (alternative to <see cref="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.RawKey"/>).
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.KdfSecret">
            <summary>
            Optional KDF secret. If provided and RawKey/RawKeyHex are null, the runtime derives a process key with PBKDF2.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.KdfIterations">
            <summary>
            PBKDF2 iteration count when deriving a key from <see cref="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.KdfSecret"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.NonceSize">
            <summary>
            Size of the nonce (IV) in bytes. 12 is recommended for AES-GCM.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.TagSize">
            <summary>
            Authentication tag size in bytes. 16 (128-bit) is standard.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions.Version">
            <summary>
            Envelope format version for future migrations.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Encryption.AesGcmEncryptor">
            <summary>
            AES-GCM implementation with per-message random nonce and versioned envelope.
            Envelope layout: [ver(1)|alg(1=GCM)|flags(1)|nonceLen(1)|nonce|tag|cipher].
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.AesGcmEncryptor.#ctor(ApiX.Security.Cryptography.Encryption.AeadEncryptionOptions)">
            <summary>
            Creates a new AES-GCM encryptor instance.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.AesGcmEncryptor.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.AesGcmEncryptor.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.AesGcmEncryptor.EncryptToBase64Url(System.String,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.AesGcmEncryptor.DecryptFromBase64Url(System.String,System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:ApiX.Security.Cryptography.Encryption.EncryptionFacade">
            <summary>
            Tries AES-GCM first; if it fails and a legacy decryptor is configured, falls back to legacy CBC.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.EncryptionFacade.#ctor(ApiX.Security.Cryptography.Encryption.IAuthenticatedEncryptor,ApiX.Security.Cryptography.Encryption.LegacyAesCbcDecryptor)">
            <summary>
            
            </summary>
            <param name="primary"></param>
            <param name="legacy"></param>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.EncryptionFacade.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="plaintext"></param>
            <param name="aad"></param>
            <returns></returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.EncryptionFacade.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="envelope"></param>
            <param name="aad"></param>
            <returns></returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.EncryptionFacade.EncryptToBase64Url(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="plaintext"></param>
            <param name="aad"></param>
            <returns></returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.EncryptionFacade.DecryptFromBase64Url(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            
            </summary>
            <param name="b64url"></param>
            <param name="aad"></param>
            <returns></returns>
        </member>
        <member name="T:ApiX.Security.Cryptography.Encryption.EncryptionServiceCollectionExtensions">
            <summary>
            Service registration extensions for encryption components.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.EncryptionServiceCollectionExtensions.AddAeadEncryption(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Registers authenticated encryption (AES-GCM) using options from configuration.
            </summary>
            <param name="services">Service collection.</param>
            <param name="config">Application configuration.</param>
            <param name="sectionPath">Configuration path. Default: "Security:Encryption".</param>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.EncryptionServiceCollectionExtensions.AddAeadEncryptionWithLegacyFallback(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String)">
            <summary>
            (Optional) Adds a facade that can also decrypt legacy CBC ciphertexts while encrypting with GCM.
            Provide legacy key/iv from config section "Security:Encryption:Legacy".
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Encryption.IAuthenticatedEncryptor">
            <summary>
            Authenticated encryption service (AEAD).
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.IAuthenticatedEncryptor.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Encrypts plaintext (bytes) with optional AAD and returns a versioned envelope (bytes).
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.IAuthenticatedEncryptor.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Decrypts a versioned envelope (bytes) with optional AAD and returns plaintext (bytes).
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.IAuthenticatedEncryptor.EncryptToBase64Url(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Encrypts a UTF-8 string and returns a Base64Url-encoded envelope.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.IAuthenticatedEncryptor.DecryptFromBase64Url(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Decrypts a Base64Url-encoded envelope and returns a UTF-8 string.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Encryption.LegacyAesCbcDecryptor">
            <summary>
            Legacy AES-CBC decryptor for migrating old ciphertexts. Not for new encryptions.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.LegacyAesCbcDecryptor.#ctor(System.String,System.String)">
            <summary>
            Creates a decryptor using fixed key and IV (legacy).
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Encryption.LegacyAesCbcDecryptor.DecryptFromBase64(System.String)">
            <summary>
            Decrypts a Base64 string produced by the legacy CBC helper.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.Argon2idPasswordHasher">
            <summary>
            Provides password hashing and verification using the Argon2id algorithm.
            <para>
            This implementation leverages configuration supplied through 
            <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/> to determine Argon2id parameters 
            such as memory cost, iterations, parallelism, salt size, and hash size.
            </para>
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Argon2idPasswordHasher.#ctor(Microsoft.Extensions.Options.IOptions{ApiX.Security.Cryptography.Hashing.PasswordHashingOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:ApiX.Security.Cryptography.Hashing.Argon2idPasswordHasher"/> class
            using the specified hashing options.
            </summary>
            <param name="opts">
            A configuration snapshot containing <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/>,
            which defines Argon2id parameters and the algorithm to use.
            </param>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Argon2idPasswordHasher.Hash(System.String)">
            <summary>
            Generates an Argon2id hash for the specified plain-text password.
            </summary>
            <param name="password">The plain-text password to hash.</param>
            <returns>
            A formatted string containing the Argon2id hash, including algorithm 
            identifier, parameters, salt, and derived key.
            </returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Argon2idPasswordHasher.Verify(System.String,System.String,System.Boolean@)">
            <summary>
            Verifies that a provided plain-text password matches a previously 
            generated Argon2id hash.
            </summary>
            <param name="password">The plain-text password to verify.</param>
            <param name="stored">The stored hash string to compare against.</param>
            <param name="needsRehash">
            Set to <c>true</c> if the password was valid but the stored hash was 
            generated with weaker parameters than the current configuration, 
            indicating that the password should be re-hashed; otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the password matches the stored hash; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.HashingServiceCollectionExtensions">
            <summary>
            Provides extension methods for registering password hashing services
            into an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.HashingServiceCollectionExtensions.AddPasswordHashing(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Registers password hashing services, algorithms, and factories with the dependency injection container.
            </summary>
            <param name="services">The DI service collection to add registrations to.</param>
            <param name="config">
            The application configuration from which <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/>
            will be bound (e.g., <c>appsettings.json</c>).
            </param>
            <param name="sectionPath">
            The configuration section path that contains the <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/>.
            Defaults to <c>"Security:PasswordHashing"</c>.
            </param>
            <returns>
            The same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance so that additional calls can be chained.
            </returns>
            <remarks>
            <list type="bullet">
            <item>Registers <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/> from configuration.</item>
            <item>Registers concrete implementations <see cref="T:ApiX.Security.Cryptography.Hashing.Pbkdf2PasswordHasher"/> and <see cref="T:ApiX.Security.Cryptography.Hashing.Argon2idPasswordHasher"/>.</item>
            <item>Registers <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasherFactory"/> for algorithm selection and detection.</item>
            <item>Optionally exposes the current default algorithm directly as <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasher"/> via <c>Transient</c> registration.</item>
            </list>
            </remarks>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.IPasswordHasher">
            <summary>
            Defines a contract for password hashing and verification services.
            </summary>
            <remarks>
            Implementations wrap a specific algorithm (e.g., PBKDF2, Argon2id) and its
            configuration. Consumers should not hardcode algorithms, but instead rely
            on <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasherFactory"/> to obtain the configured hasher.
            </remarks>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.IPasswordHasher.Hash(System.String)">
            <summary>
            Computes a hash of the specified plain-text password using the
            algorithm and parameters configured for this hasher.
            </summary>
            <param name="password">The plain-text password to hash.</param>
            <returns>
            A versioned, self-describing hash string containing the algorithm
            identifier, parameters, salt, and derived key.
            </returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.IPasswordHasher.Verify(System.String,System.String,System.Boolean@)">
            <summary>
            Verifies that a plain-text password matches a stored hash string.
            </summary>
            <param name="password">The plain-text password to verify.</param>
            <param name="stored">The stored hash string to compare against.</param>
            <param name="needsRehash">
            Outputs <c>true</c> if the password matched but the stored hash was
            generated with weaker parameters (e.g., lower iterations, smaller salt/hash)
            or with a different algorithm than is currently configured, indicating that
            the password should be re-hashed; otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the password matches the stored hash; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.IPasswordHasherFactory">
            <summary>
            Defines a contract for creating password hashers and detecting algorithms.
            </summary>
            <remarks>
            This abstraction centralizes the selection of the current default
            <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasher"/> and allows detection of which algorithm was used
            to produce an existing stored hash.
            </remarks>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.IPasswordHasherFactory.Create">
            <summary>
            Creates an <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasher"/> based on the currently configured
            default algorithm and parameters.
            </summary>
            <returns>
            An <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasher"/> implementation suitable for hashing new passwords.
            </returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.IPasswordHasherFactory.TryDetect(System.String,ApiX.Security.Cryptography.Hashing.PasswordAlgorithm@)">
            <summary>
            Attempts to detect which algorithm a stored hash string uses.
            </summary>
            <param name="stored">The stored hash string to inspect.</param>
            <param name="alg">
            When this method returns <c>true</c>, contains the detected <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm"/>.
            </param>
            <returns>
            <c>true</c> if the stored hash could be recognized and mapped to a known algorithm;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm">
            <summary>
            Enumerates the supported password hashing algorithms.
            </summary>
        </member>
        <member name="F:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm.Pbkdf2Sha256">
            <summary>
            Password-Based Key Derivation Function 2 (PBKDF2) with HMAC-SHA256.
            </summary>
        </member>
        <member name="F:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm.Argon2id">
            <summary>
            Argon2id, the hybrid variant of Argon2 combining data-dependent
            and data-independent memory access for resistance against GPU and
            side-channel attacks.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.PasswordHasherFactory">
            <summary>
            Default implementation of <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasherFactory"/> that
            provides configured password hasher instances and algorithm detection.
            </summary>
            <remarks>
            This factory uses <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/> to determine which
            algorithm should be returned by <see cref="M:ApiX.Security.Cryptography.Hashing.PasswordHasherFactory.Create"/>. It also exposes
            <see cref="M:ApiX.Security.Cryptography.Hashing.PasswordHasherFactory.TryDetect(System.String,ApiX.Security.Cryptography.Hashing.PasswordAlgorithm@)"/> to identify the algorithm used in an existing stored hash.
            </remarks>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.PasswordHasherFactory.#ctor(Microsoft.Extensions.Options.IOptions{ApiX.Security.Cryptography.Hashing.PasswordHashingOptions},ApiX.Security.Cryptography.Hashing.Pbkdf2PasswordHasher,ApiX.Security.Cryptography.Hashing.Argon2idPasswordHasher)">
            <summary>
            Initializes a new instance of the <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHasherFactory"/> class.
            </summary>
            <param name="opts">The configured <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/>.</param>
            <param name="pbkdf2">The PBKDF2 hasher implementation.</param>
            <param name="argon2id">The Argon2id hasher implementation.</param>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.PasswordHasherFactory.Create">
            <summary>
            Creates the currently configured default <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasher"/>.
            </summary>
            <returns>An <see cref="T:ApiX.Security.Cryptography.Hashing.IPasswordHasher"/> based on the configured algorithm.</returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.PasswordHasherFactory.TryDetect(System.String,ApiX.Security.Cryptography.Hashing.PasswordAlgorithm@)">
            <summary>
            Attempts to detect which password hashing algorithm a stored hash uses.
            </summary>
            <param name="stored">The stored hash string to inspect.</param>
            <param name="alg">
            When this method returns <c>true</c>, contains the detected <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm"/>.
            </param>
            <returns>
            <c>true</c> if the stored hash could be parsed and mapped to a known algorithm;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.HashMeta">
            <summary>
            Base type for parsed metadata describing the parameters
            used to generate a stored password hash.
            </summary>
            <remarks>
            Instances of <see cref="T:ApiX.Security.Cryptography.Hashing.HashMeta"/> are produced by the
            internal <c>PasswordHasherInspector</c> when decoding the
            self-describing APX hash format.
            </remarks>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.Pbkdf2Meta">
            <summary>
            Metadata describing the parameters of a PBKDF2-HMAC-SHA256 hash.
            </summary>
            <param name="Iterations">The iteration count used when deriving the key.</param>
            <param name="SaltSize">The length of the salt in bytes.</param>
            <param name="HashSize">The length of the derived key (hash) in bytes.</param>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Pbkdf2Meta.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Metadata describing the parameters of a PBKDF2-HMAC-SHA256 hash.
            </summary>
            <param name="Iterations">The iteration count used when deriving the key.</param>
            <param name="SaltSize">The length of the salt in bytes.</param>
            <param name="HashSize">The length of the derived key (hash) in bytes.</param>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Pbkdf2Meta.Iterations">
            <summary>The iteration count used when deriving the key.</summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Pbkdf2Meta.SaltSize">
            <summary>The length of the salt in bytes.</summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Pbkdf2Meta.HashSize">
            <summary>The length of the derived key (hash) in bytes.</summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.Argon2idMeta">
            <summary>
            Metadata describing the parameters of an Argon2id hash.
            </summary>
            <param name="MemoryKb">The memory cost in KiB used during hashing.</param>
            <param name="Iterations">The time cost (number of iterations).</param>
            <param name="Parallelism">The degree of parallelism (lanes/threads).</param>
            <param name="SaltLen">The length of the salt in bytes.</param>
            <param name="HashLen">The length of the derived key (hash) in bytes.</param>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Argon2idMeta.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Metadata describing the parameters of an Argon2id hash.
            </summary>
            <param name="MemoryKb">The memory cost in KiB used during hashing.</param>
            <param name="Iterations">The time cost (number of iterations).</param>
            <param name="Parallelism">The degree of parallelism (lanes/threads).</param>
            <param name="SaltLen">The length of the salt in bytes.</param>
            <param name="HashLen">The length of the derived key (hash) in bytes.</param>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idMeta.MemoryKb">
            <summary>The memory cost in KiB used during hashing.</summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idMeta.Iterations">
            <summary>The time cost (number of iterations).</summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idMeta.Parallelism">
            <summary>The degree of parallelism (lanes/threads).</summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idMeta.SaltLen">
            <summary>The length of the salt in bytes.</summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idMeta.HashLen">
            <summary>The length of the derived key (hash) in bytes.</summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.PasswordHashHelperArgon2id.HashPassword(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Hashes a password using Argon2id with a random salt, returning a versioned, self-describing APX string.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.PasswordHashHelperArgon2id.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies a password against an APX Argon2id string. Returns false on mismatch or malformed input.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.PasswordHashHelperPbkdf2.HashPassword(System.String,System.Nullable{System.Int32})">
            <summary>
            Hashes a password (PBKDF2-HMAC-SHA256) with random salt in a versioned, self-describing format.
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.PasswordHashHelperPbkdf2.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies a password against a stored APX format string.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions">
            <summary>
            Represents the configuration options for password hashing.
            </summary>
            <remarks>
            These options determine which <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm"/> is used
            and define algorithm-specific parameters for PBKDF2 and Argon2id.
            </remarks>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions.Algorithm">
            <summary>
            Gets or sets the algorithm to use when hashing new passwords.
            Defaults to <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm.Argon2id"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions.Pbkdf2">
            <summary>
            Gets or sets the PBKDF2-specific parameters.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions.Argon2Id">
            <summary>
            Gets or sets the Argon2id-specific parameters.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.Pbkdf2Options">
            <summary>
            Defines algorithm parameters for PBKDF2-HMAC-SHA256 password hashing.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Pbkdf2Options.Iterations">
            <summary>
            Gets or sets the number of PBKDF2 iterations.
            Higher values increase computational cost. Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperPbkdf2.DefaultIterations"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Pbkdf2Options.SaltSize">
            <summary>
            Gets or sets the size of the salt in bytes. Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperPbkdf2.SaltSize"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Pbkdf2Options.HashSize">
            <summary>
            Gets or sets the size of the derived key (hash) in bytes.
            Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperPbkdf2.HashSize"/>.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.Argon2idOptions">
            <summary>
            Defines algorithm parameters for Argon2id password hashing.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idOptions.MemoryKb">
            <summary>
            Gets or sets the memory cost in KiB (RAM usage).
            Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperArgon2id.DefaultMemoryKb"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idOptions.Iterations">
            <summary>
            Gets or sets the number of iterations (time cost).
            Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperArgon2id.DefaultIterations"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idOptions.Parallelism">
            <summary>
            Gets or sets the degree of parallelism (number of lanes/threads).
            Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperArgon2id.DefaultParallelism"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idOptions.SaltSize">
            <summary>
            Gets or sets the salt length in bytes.
            Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperArgon2id.DefaultSaltSize"/>.
            </summary>
        </member>
        <member name="P:ApiX.Security.Cryptography.Hashing.Argon2idOptions.HashSize">
            <summary>
            Gets or sets the size of the derived key (hash) in bytes.
            Default: <see cref="F:ApiX.Security.Cryptography.Hashing.PasswordHashHelperArgon2id.DefaultHashSize"/>.
            </summary>
        </member>
        <member name="T:ApiX.Security.Cryptography.Hashing.Pbkdf2PasswordHasher">
            <summary>
            Provides password hashing and verification using PBKDF2 with HMAC-SHA256.
            <para>
            Parameters (iterations, salt size, and hash size) are taken from
            <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/> at construction time.
            </para>
            </summary>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Pbkdf2PasswordHasher.#ctor(Microsoft.Extensions.Options.IOptions{ApiX.Security.Cryptography.Hashing.PasswordHashingOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:ApiX.Security.Cryptography.Hashing.Pbkdf2PasswordHasher"/> class
            using the supplied hashing options.
            </summary>
            <param name="opts">
            Options snapshot containing <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordHashingOptions"/>, including
            PBKDF2 parameters and the currently selected <see cref="T:ApiX.Security.Cryptography.Hashing.PasswordAlgorithm"/>.
            </param>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Pbkdf2PasswordHasher.Hash(System.String)">
            <summary>
            Generates a PBKDF2 (HMAC-SHA256) hash for the specified plain-text password.
            </summary>
            <param name="password">The plain-text password to hash.</param>
            <returns>
            A formatted string containing the PBKDF2 hash in the library’s versioned
            <c>APX$...</c> format, including algorithm identifier, parameters, salt,
            and derived key.
            </returns>
        </member>
        <member name="M:ApiX.Security.Cryptography.Hashing.Pbkdf2PasswordHasher.Verify(System.String,System.String,System.Boolean@)">
            <summary>
            Verifies that a provided plain-text password matches a previously
            generated PBKDF2 hash.
            </summary>
            <param name="password">The plain-text password to verify.</param>
            <param name="stored">The stored PBKDF2 hash string to compare against.</param>
            <param name="needsRehash">
            Set to <c>true</c> if the password was valid but the stored hash was
            produced with weaker parameters than the current configuration (e.g.,
            fewer iterations, different salt/hash lengths), or if the configured
            algorithm has changed—indicating the hash should be re-computed; otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the password matches the stored hash; otherwise <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
