<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApiX.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:ApiX.AspNetCore.Attributes.UserIdInjectionAttribute">
            <summary>
            Attribute for applying <see cref="T:ApiX.AspNetCore.Filters.UserIdInjectionFilter"/> to controllers or actions.
            </summary>
            <remarks>
            <para>
            This attribute injects the current user's <c>UserId</c> claim into action arguments
            of type <see cref="T:ApiX.Abstractions.Transport.Requests.BaseRequest"/>.
            </para>
            <para>
            It can be applied at the controller or action level, and accepts parameters to configure
            the claim type and whether the claim is required.
            </para>
            </remarks>
        </member>
        <member name="M:ApiX.AspNetCore.Attributes.UserIdInjectionAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ApiX.AspNetCore.Attributes.UserIdInjectionAttribute"/> class.
            </summary>
            <param name="claimType">
            The claim type to look for on the current user (defaults to <c>"UserId"</c>).
            </param>
            <param name="required">
            Indicates whether the claim is required. If <c>true</c> and no valid claim is found,
            the request is short-circuited with a <see cref="T:Microsoft.AspNetCore.Mvc.ForbidResult"/>.
            </param>
        </member>
        <member name="T:ApiX.AspNetCore.Filters.UserIdInjectionFilter">
            <summary>
            An ASP.NET Core action filter that injects a <c>UserId</c> value from the authenticated user's claims
            into any action arguments of type <see cref="T:ApiX.Abstractions.Transport.Requests.BaseRequest"/>.
            </summary>
            <remarks>
            <para>
            The filter inspects the current <see cref="T:System.Security.Claims.ClaimsPrincipal"/> for a claim
            matching the specified claim type (defaults to <c>"UserId"</c>).
            </para>
            <para>
            If the claim is found and parsed as a <see cref="T:System.Guid"/>, its value is assigned to the
            <see cref="P:ApiX.Abstractions.Transport.Requests.BaseRequest.UserId"/> property (if it is currently <see cref="F:System.Guid.Empty"/>).
            </para>
            <para>
            If the claim is required but not present or invalid, the request is short-circuited with a <see cref="T:Microsoft.AspNetCore.Mvc.ForbidResult"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ApiX.AspNetCore.Filters.UserIdInjectionFilter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ApiX.AspNetCore.Filters.UserIdInjectionFilter"/> class.
            </summary>
            <param name="claimType">
            The claim type to look for on the current user (defaults to <c>"UserId"</c>).
            </param>
            <param name="required">
            Indicates whether the claim is required. If <c>true</c> and no valid claim is found,
            the request is short-circuited with a <see cref="T:Microsoft.AspNetCore.Mvc.ForbidResult"/>.
            </param>
        </member>
        <member name="M:ApiX.AspNetCore.Filters.UserIdInjectionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <inheritdoc />
        </member>
        <member name="T:ApiX.AspNetCore.ProblemDetails.ExceptionToProblemProfile">
            <summary>
            
            </summary>
        </member>
        <member name="T:ApiX.AspNetCore.ProblemDetails.IProblemDetailsWriter">
            <summary>
            
            </summary>
        </member>
        <member name="T:ApiX.AspNetCore.ProblemDetails.ProblemDetailsMapper">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
