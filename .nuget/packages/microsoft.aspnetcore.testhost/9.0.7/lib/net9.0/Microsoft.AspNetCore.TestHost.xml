<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.TestHost</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.TestHost.ClientHandler">
            <summary>
            This adapts HttpRequestMessages to ASP.NET Core requests, dispatches them through the pipeline, and returns the
            associated HttpResponseMessage.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.ClientHandler.#ctor(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.TestHost.ApplicationWrapper,System.Action{Microsoft.AspNetCore.Http.HttpContext})">
            <summary>
            Create a new handler.
            </summary>
            <param name="pathBase">The base path.</param>
            <param name="application">The <see cref="T:Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1"/>.</param>
            <param name="additionalContextConfiguration">The action to additionally configure <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.ClientHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            This synchronous method is not supported due to the risk of threadpool exhaustion when running multiple tests in parallel. 
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <exception cref="T:System.NotSupportedException">Thrown unconditionally.</exception>
            <remarks>
            Use the asynchronous version of this method, <see cref="M:Microsoft.AspNetCore.TestHost.ClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"/>, instead.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.ClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            This adapts HttpRequestMessages to ASP.NET Core requests, dispatches them through the pipeline, and returns the
            associated HttpResponseMessage.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> returning the <see cref="T:System.Net.Http.HttpResponseMessage"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.HostBuilderTestServerExtensions">
            <summary>
            Contains extensions for retrieving properties from <see cref="T:Microsoft.Extensions.Hosting.IHost"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.HostBuilderTestServerExtensions.GetTestServer(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            Retrieves the TestServer from the host services.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.HostBuilderTestServerExtensions.GetTestClient(Microsoft.Extensions.Hosting.IHost)">
            <summary>
            Retrieves the test client from the TestServer in the host services.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.HttpContextBuilder.SendAsync(System.Threading.CancellationToken)">
            <summary>
            Start processing the request.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.HttpResetTestException">
            <summary>
            Used to surface to the test client that the application invoked <see cref="M:Microsoft.AspNetCore.Http.Features.IHttpResetFeature.Reset(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.HttpResetTestException.#ctor(System.Int32)">
            <summary>
            Creates a new test exception
            </summary>
            <param name="errorCode">The error code passed to <see cref="M:Microsoft.AspNetCore.Http.Features.IHttpResetFeature.Reset(System.Int32)"/></param>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.HttpResetTestException.ErrorCode">
            <summary>
            The error code passed to <see cref="M:Microsoft.AspNetCore.Http.Features.IHttpResetFeature.Reset(System.Int32)"/>
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.RequestBuilder">
            <summary>
            Used to construct a HttpRequestMessage object.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.RequestBuilder.#ctor(Microsoft.AspNetCore.TestHost.TestServer,System.String)">
            <summary>
            Construct a new HttpRequestMessage with the given path.
            </summary>
            <param name="server"></param>
            <param name="path"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.RequestBuilder.TestServer">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.TestHost.RequestBuilder.TestServer"/> instance for which the request is being built.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.RequestBuilder.And(System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
            Configure any HttpRequestMessage properties.
            </summary>
            <param name="configure"></param>
            <returns>This <see cref="T:Microsoft.AspNetCore.TestHost.RequestBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.RequestBuilder.AddHeader(System.String,System.String)">
            <summary>
            Add the given header and value to the request or request content.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns>This <see cref="T:Microsoft.AspNetCore.TestHost.RequestBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.RequestBuilder.SendAsync(System.String)">
            <summary>
            Set the request method and start processing the request.
            </summary>
            <param name="method"></param>
            <returns>The resulting <see cref="T:System.Net.Http.HttpResponseMessage"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.RequestBuilder.GetAsync">
            <summary>
            Set the request method to GET and start processing the request.
            </summary>
            <returns>The resulting <see cref="T:System.Net.Http.HttpResponseMessage"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.RequestBuilder.PostAsync">
            <summary>
            Set the request method to POST and start processing the request.
            </summary>
            <returns>The resulting <see cref="T:System.Net.Http.HttpResponseMessage"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.ResponseBodyReaderStream">
            <summary>
            The client's view of the response body.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.TestServer">
            <summary>
            An <see cref="T:Microsoft.AspNetCore.Hosting.Server.IServer"/> implementation for executing tests.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.#ctor(System.IServiceProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.TestHost.TestServerOptions})">
            <summary>
            For use with IHostBuilder.
            </summary>
            <param name="services"></param>
            <param name="optionsAccessor"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.#ctor(System.IServiceProvider,Microsoft.AspNetCore.Http.Features.IFeatureCollection,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.TestHost.TestServerOptions})">
            <summary>
            For use with IHostBuilder.
            </summary>
            <param name="services"></param>
            <param name="featureCollection"></param>
            <param name="optionsAccessor"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.#ctor(System.IServiceProvider)">
            <summary>
            For use with IHostBuilder.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.#ctor(System.IServiceProvider,Microsoft.AspNetCore.Http.Features.IFeatureCollection)">
            <summary>
            For use with IHostBuilder.
            </summary>
            <param name="services"></param>
            <param name="featureCollection"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.#ctor(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            For use with IWebHostBuilder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.#ctor(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.AspNetCore.Http.Features.IFeatureCollection)">
            <summary>
            For use with IWebHostBuilder.
            </summary>
            <param name="builder"></param>
            <param name="featureCollection"></param>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServer.BaseAddress">
            <summary>
            Gets or sets the base address associated with the HttpClient returned by the test server. Defaults to http://localhost/.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServer.Host">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" /> instance associated with the test server.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServer.Services">
            <summary>
            Gets the service provider associated with the test server.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServer.Features">
            <summary>
            Gets the collection of server features associated with the test server.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServer.AllowSynchronousIO">
            <summary>
            Gets or sets a value that controls whether synchronous IO is allowed for the <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Request"/> and <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Response"/>. The default value is <see langword="false" />.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServer.PreserveExecutionContext">
            <summary>
            Gets or sets a value that controls if <see cref="T:System.Threading.ExecutionContext"/> and <see cref="T:System.Threading.AsyncLocal`1"/> values are preserved from the client to the server. The default value is <see langword="false" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.CreateHandler">
            <summary>
            Creates a custom <see cref="T:System.Net.Http.HttpMessageHandler" /> for processing HTTP requests/responses with the test server.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.CreateHandler(System.Action{Microsoft.AspNetCore.Http.HttpContext})">
            <summary>
            Creates a custom <see cref="T:System.Net.Http.HttpMessageHandler" /> for processing HTTP requests/responses with custom configuration with the test server.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.CreateClient">
            <summary>
            Creates a <see cref="T:System.Net.Http.HttpClient" /> for processing HTTP requests/responses with the test server.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.CreateWebSocketClient">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.TestHost.WebSocketClient" /> for interacting with the test server.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.CreateRequest(System.String)">
            <summary>
            Begins constructing a request message for submission.
            </summary>
            <param name="path"></param>
            <returns><see cref="T:Microsoft.AspNetCore.TestHost.RequestBuilder"/> to use in constructing additional request details.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.SendAsync(System.Action{Microsoft.AspNetCore.Http.HttpContext},System.Threading.CancellationToken)">
            <summary>
            Creates, configures, sends, and returns a <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>. This completes as soon as the response is started.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.TestServer.Dispose">
            <summary>
            Dispose the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" /> object associated with the test server.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.TestServerOptions">
            <summary>
            Options for the test server.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServerOptions.AllowSynchronousIO">
            <summary>
            Gets or sets a value that controls whether synchronous IO is allowed for the <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Request"/> and <see cref="P:Microsoft.AspNetCore.Http.HttpContext.Response"/>. The default value is <see langword="false" />.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServerOptions.PreserveExecutionContext">
            <summary>
            Gets or sets a value that controls if <see cref="T:System.Threading.ExecutionContext"/> and <see cref="T:System.Threading.AsyncLocal`1"/> values are preserved from the client to the server. The default value is <see langword="false" />.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.TestServerOptions.BaseAddress">
            <summary>
            Gets or sets the base address associated with the HttpClient returned by the test server. Defaults to http://localhost/.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions">
            <summary>
            Contains extensions for configuring the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseTestServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder)">
            <summary>
            Enables the <see cref="T:Microsoft.AspNetCore.TestHost.TestServer" /> service.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseTestServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.AspNetCore.TestHost.TestServerOptions})">
            <summary>
            Enables the <see cref="T:Microsoft.AspNetCore.TestHost.TestServer" /> service.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</param>
            <param name="configureOptions">Configures test server options</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.GetTestServer(Microsoft.AspNetCore.Hosting.IWebHost)">
            <summary>
            Retrieves the TestServer from the host services.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.GetTestClient(Microsoft.AspNetCore.Hosting.IWebHost)">
            <summary>
            Retrieves the test client from the TestServer in the host services.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.ConfigureTestServices(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Configures the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance with the services provided in <paramref name="servicesConfiguration" />.
            </summary>
            <param name="webHostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</param>
            <param name="servicesConfiguration">An <see cref="T:System.Action"/> that registers services onto the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.ConfigureTestContainer``1(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Action{``0})">
            <summary>
            Configures the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance with the services provided in <paramref name="servicesConfiguration" />.
            </summary>
            <param name="webHostBuilder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</param>
            <param name="servicesConfiguration">An <see cref="T:System.Action"/> that registers services onto the <typeparamref name="TContainer"/>.</param>
            <typeparam name="TContainer">A collection of service descriptors.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseSolutionRelativeContentRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String,System.String)">
            <summary>
            Sets the content root of relative to the <paramref name="solutionRelativePath" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</param>
            <param name="solutionRelativePath">The directory of the solution file.</param>
            <param name="solutionName">The name of the solution file to make the content root relative to.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseSolutionRelativeContentRoot(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.String,System.String,System.String)">
            <summary>
            Sets the content root of relative to the <paramref name="solutionRelativePath" />.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</param>
            <param name="solutionRelativePath">The directory of the solution file.</param>
            <param name="applicationBasePath">The root of the app's directory.</param>
            <param name="solutionName">The name of the solution file to make the content root relative to.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.WebHostBuilderFactory">
            <summary>
            A factory for creating <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderFactory.CreateFromAssemblyEntryPoint(System.Reflection.Assembly,System.String[])">
            <summary>
            Resolves an <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> defined in the entry point of an assembly.
            </summary>
            <param name="assembly">The assembly to look for an <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> in.</param>
            <param name="args">The arguments to use when creating the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> instance.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> instance retrieved from the assembly in <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebHostBuilderFactory.CreateFromTypesAssemblyEntryPoint``1(System.String[])">
            <summary>
            Resolves an <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> defined in an assembly where <typeparamref name="T"/> is declared.
            </summary>
            <param name="args">The arguments to use when creating the <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> instance.</param>
            <typeparam name="T">Type contained in the target assembly</typeparam>
            <returns>An <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder"/> instance retrieved from the assembly.</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.TestHost.WebSocketClient">
            <summary>
            Provides a client for connecting over WebSockets to a test server.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.WebSocketClient.SubProtocols">
            <summary>
            Gets the list of WebSocket subprotocols that are established in the initial handshake.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.TestHost.WebSocketClient.ConfigureRequest">
            <summary>
            Gets or sets the handler used to configure the outgoing request to the WebSocket endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.TestHost.WebSocketClient.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Establishes a WebSocket connection to an endpoint.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of the endpoint.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> used to terminate the connection.</param>
        </member>
    </members>
</doc>
